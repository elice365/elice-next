generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid()) @map("uid")
  email         String         @unique
  name          String?
  phoneNumber   String?        @map("phone_number")
  imageUrl      String?        @map("image_url")
  gender        String?
  birthDate     DateTime?      @map("birth_date")
  marketing     Boolean        @default(false)
  terms         Boolean        @default(false)
  status        String         @default("active")
  lastLoginTime DateTime?      @map("last_login_time")
  createdTime   DateTime       @default(now()) @map("created_time")
  updateTime    DateTime       @updatedAt @map("update_time")
  auth          Auth?
  noticeReads   NoticeRead[]
  notifications Notification[]
  sessions      Session[]
  socialLogins  Social[]
  userRoles     UserRole[]
  likes         Like[]
  postViews     PostView[]

  @@map("user")
}

model Social {
  id             String    @id @default(cuid()) @map("uid")
  userId         String    @map("user_id")
  email          String
  social         String
  socialId       String    @map("social_id")
  accessToken    String?   @map("access_token")
  accessExpires  DateTime? @map("access_expires")
  refreshToken   String?   @map("refresh_token")
  refreshExpires DateTime? @map("refresh_expires")
  scope          String?
  profileData    Json?     @map("profile")
  createdTime    DateTime  @default(now()) @map("created_time")
  updateTime     DateTime  @updatedAt @map("update_time")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([social, socialId])
  @@unique([userId, social])
  @@unique([social, socialId], map: "social_social_socialid_unique")
  @@unique([userId, social], map: "social_userid_social_unique")
  @@map("social")
}

model Auth {
  id                       String    @id @map("uid")
  passwordHash             String    @map("password_hash")
  passwordSalt             String    @map("password_salt")
  passwordResetToken       String?   @map("password_reset_token")
  passwordResetExpires     DateTime? @map("password_reset_expires")
  phoneVerified            Boolean   @default(false) @map("phone_verified")
  emailVerified            Boolean   @default(false) @map("email_verified")
  emailVerificationToken   String?   @map("email_verification_token")
  emailVerificationExpires DateTime? @map("email_verification_expires")
  twoFactor                Boolean   @default(false) @map("two_factor")
  twoFactorSecret          String?   @map("two_factor_secret")
  status                   String    @default("active")
  createdTime              DateTime  @default(now()) @map("created_time")
  updateTime               DateTime  @updatedAt @map("update_time")
  user                     User      @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("auth")
}

model Session {
  sessionId        String    @id @map("session_id")
  userId           String    @map("uid")
  refreshToken     String    @unique @map("refresh_token")
  deviceInfo       String?   @map("device_info")
  ipAddress        String?   @map("ip_address")
  userAgent        String?   @map("user_agent")
  active           Boolean   @default(true)
  lastActivityTime DateTime? @map("last_activity_time")
  loginType        String    @default("email") @map("login_type")
  expiresTime      DateTime  @map("expires_time")
  createdTime      DateTime  @default(now()) @map("created_time")
  updateTime       DateTime  @updatedAt @map("update_time")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  userId      String   @map("user_id")
  roleId      String   @map("role_id")
  createdTime DateTime @default(now()) @map("created_time")
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model history {
  uid        String   @id @map("uid")
  email      String
  ipAddress  String   @map("ip_address")
  userAgent  String?  @map("user_agent")
  successful Boolean  @default(false)
  created_at DateTime @default(now())

  @@map("history")
}

model Notification {
  uid         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String    @map("user_id") @db.VarChar
  category    String    @db.VarChar
  title       String    @db.VarChar
  content     String
  link        String?   @db.VarChar
  read        Boolean?  @default(false)
  readTime    DateTime? @map("readTime") @db.Timestamptz(6)
  createdTime DateTime? @default(now()) @map("created_time") @db.Timestamptz(6)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId, read, createdTime], map: "notifications_userid_read_createdtime_idx")
  @@map("notifications")
}

model Notice {
  uid         String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String       @db.VarChar
  content     String
  link        String?      @db.VarChar
  createdTime DateTime?    @default(now()) @map("created_time") @db.Timestamptz(6)
  startsTime  DateTime?    @default(now()) @map("starts_time") @db.Timestamptz(6)
  endsTime    DateTime?    @map("ends_time") @db.Timestamptz(6)
  reads       NoticeRead[]

  @@index([startsTime, endsTime])
  @@index([startsTime, endsTime], map: "notices_startstime_endstime_idx")
  @@map("notices")
}

model NoticeRead {
  noticeId String    @map("notice_id") @db.Uuid
  userId   String    @map("user_id") @db.VarChar
  readTime DateTime? @default(now()) @map("read_time") @db.Timestamptz(6)
  notice   Notice    @relation(fields: [noticeId], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([noticeId, userId])
  @@index([userId], map: "idx_notice_reads_user")
  @@index([userId], map: "notice_reads_userid_idx")
  @@map("notice_reads")
}

model Router {
  uid         String    @id(map: "Router_pkey") @default(dbgenerated("(('cl'::text || (EXTRACT(epoch FROM clock_timestamp()))::text) || (random())::text)"))
  name        String    @db.VarChar
  path        String    @db.VarChar
  icon        String    @db.VarChar
  role        String[]  @db.VarChar(100)
  createdTime DateTime? @default(now()) @map("created_time") @db.Timestamptz(6)
  updateTime  DateTime? @default(now()) @updatedAt @map("update_time") @db.Timestamptz(6)

  @@map("router")
}

model Post {
  uid           String     @id @default(uuid()) @map("uid")
  type          String
  title         String
  description   String
  url           String
  images        Json
  status        String     @default("draft")
  publishedAt   DateTime?  @map("published_at")
  createdTime   DateTime   @default(now()) @map("created_time")
  updatedTime   DateTime   @updatedAt @map("updated_time")
  views         Int        @default(0)
  likeCount     Int        @default(0) @map("like_count")

  // Relations
  categoryId    String?    @map("category_id")
  category      Category?  @relation(fields: [categoryId], references: [uid])
  tags          Tag[]      @relation("PostTags")
  likes         Like[]     @relation("PostLikes")
  viewsDetail   PostView[] @relation("PostViewRelation")

  @@map("posts")
}

model Tag {
  uid   String   @id @default(uuid()) @map("uid")
  name  String   @unique
  posts Post[]   @relation("PostTags")

  @@map("tags")
}

model Like {
  uid       String   @id @default(uuid()) @map("uid")
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post     @relation("PostLikes", fields: [postId], references: [uid])

  @@unique([userId, postId])
  @@map("likes")
}

model Category {
  uid        String      @id @default(uuid()) @map("uid")
  code       String      @unique
  name       String
  slug       String
  path       String
  level      Int

  parentId   String?     @map("parent_id")
  parent     Category?   @relation("CategoryChildren", fields: [parentId], references: [uid])
  children   Category[]  @relation("CategoryChildren")

  posts      Post[]

  @@map("categories")
}

model PostView {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  post      Post     @relation("PostViewRelation", fields: [postId], references: [uid])
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ip        String?
  userAgent String?  @map("user_agent")
  viewedAt  DateTime @default(now()) @map("viewed_at")

  @@index([postId, userId])
  @@index([postId, ip, userAgent])
  @@map("post_views")
}
